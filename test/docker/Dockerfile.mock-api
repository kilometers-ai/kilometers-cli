FROM node:18-alpine

WORKDIR /app

# Install dependencies
RUN npm init -y && \
    npm install express cors body-parser && \
    apk add --no-cache curl

# Create mock API server
COPY <<EOF /app/mock-api-server.js
const express = require('express');
const app = express();

const PORT = process.env.PORT || 3000;
const FAILURE_RATE = parseFloat(process.env.FAILURE_RATE || '0.1');
const CIRCUIT_BREAKER_THRESHOLD = parseInt(process.env.CIRCUIT_BREAKER_THRESHOLD || '3');

// Token storage
const tokens = new Map();
const refreshTokens = new Map();

// Circuit breaker state
let failureCount = 0;
let lastFailureTime = 0;
let circuitBreakerOpen = false;

app.use(express.json());
app.use(require('cors')());

// Middleware for failure simulation
app.use((req, res, next) => {
  requestCount++;
  
  // Check circuit breaker
  if (circuitBreakerOpen) {
    if (resetTime && Date.now() > resetTime) {
      circuitBreakerOpen = false;
      consecutiveFailures = 0;
      console.log('Circuit breaker reset');
    } else {
      return res.status(503).json({ error: 'Service temporarily unavailable (circuit breaker open)' });
    }
  }
  
  // Simulate failures
  if (Math.random() < FAILURE_RATE) {
    consecutiveFailures++;
    if (consecutiveFailures >= CIRCUIT_BREAKER_THRESHOLD) {
      circuitBreakerOpen = true;
      resetTime = Date.now() + 30000; // 30 second reset
      console.log('Circuit breaker opened');
    }
    return res.status(500).json({ error: 'Simulated server error' });
  }
  
  consecutiveFailures = 0;
  next();
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: Date.now(),
    version: 'mock-1.0.0',
    requestCount,
    circuitBreakerOpen
  });
});

// Authentication endpoint
app.post('/auth/token', (req, res) => {
  const { api_key } = req.body;
  
  // Simple mock authentication
  if (api_key === 'test_key') {
    const accessToken = `mock_access_token_${Date.now()}`;
    const refreshToken = `mock_refresh_token_${Date.now()}`;
    
    // Store tokens for validation
    tokens.set(accessToken, { refreshToken, expiresAt: Date.now() + 3600000 });
    refreshTokens.set(refreshToken, accessToken);
    
    res.json({
      access_token: accessToken,
      refresh_token: refreshToken,
      expires_in: 3600,
      token_type: 'Bearer'
    });
  } else {
    res.status(401).json({ error: 'Invalid API key' });
  }
});

// Token refresh endpoint
app.post('/auth/refresh', (req, res) => {
  const { refresh_token } = req.body;
  
  if (!refreshTokens.has(refresh_token)) {
    return res.status(401).json({ error: 'Invalid refresh token' });
  }
  
  const oldAccessToken = refreshTokens.get(refresh_token);
  const newAccessToken = `mock_access_token_${Date.now()}`;
  const newRefreshToken = `mock_refresh_token_${Date.now()}`;
  
  // Update token mappings
  tokens.delete(oldAccessToken);
  tokens.set(newAccessToken, { refreshToken: newRefreshToken, expiresAt: Date.now() + 3600000 });
  refreshTokens.delete(refresh_token);
  refreshTokens.set(newRefreshToken, newAccessToken);
  
  res.json({
    access_token: newAccessToken,
    refresh_token: newRefreshToken,
    expires_in: 3600,
    token_type: 'Bearer'
  });
});

// Authentication middleware
const authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const token = authHeader.substring(7);
  const tokenInfo = tokens.get(token);
  
  if (!tokenInfo || Date.now() > tokenInfo.expiresAt) {
    if (tokenInfo) {
      tokens.delete(token);
    }
    return res.status(401).json({ error: 'Token expired or invalid' });
  }

  next();
};

// Event batch endpoint
app.post('/api/v1/events/batch', authenticate, (req, res) => {
  const { session_id, events, metadata } = req.body;
  
  if (!session_id) {
    return res.status(400).json({ error: 'Missing session_id' });
  }
  
  if (!events || events.length === 0) {
    return res.status(400).json({ error: 'Empty events array' });
  }
  
  const batchId = `batch_${Date.now()}`;
  res.json({
    batch_id: batchId,
    session_id,
    events_count: events.length,
    status: 'accepted',
    processed_at: Math.floor(Date.now() / 1000)
  });
});

// Sessions endpoints
app.get('/api/v1/sessions', authenticate, (req, res) => {
  res.json({
    sessions: [{
      id: 'session_123',
      created_at: Math.floor((Date.now() - 3600000) / 1000),
      status: 'active',
      event_count: 42
    }],
    total: 1
  });
});

app.post('/api/v1/sessions', authenticate, (req, res) => {
  const sessionId = `session_${Date.now()}`;
  res.json({
    id: sessionId,
    created_at: Math.floor(Date.now() / 1000),
    status: 'created'
  });
});

// Configuration endpoint
app.get('/api/v1/config', authenticate, (req, res) => {
  res.json({
    batch_size: 100,
    batch_timeout: '30s',
    retry_attempts: 3,
    retry_delay: '1s',
    circuit_breaker_threshold: 5,
    rate_limit: 1000,
    features: {
      risk_analysis: true,
      content_filtering: true,
      real_time_alerts: false
    }
  });
});

// Version endpoint
app.get('/api/v1/version', (req, res) => {
  res.json({
    version: '1.0.0',
    api_version: 'v1',
    build_time: new Date().toISOString(),
    status: 'stable'
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Mock API server listening on port ${PORT}`);
  console.log(`Failure rate: ${FAILURE_RATE * 100}%`);
  console.log(`Circuit breaker threshold: ${CIRCUIT_BREAKER_THRESHOLD}`);
});
EOF

EXPOSE 8080

CMD ["node", "mock-api-server.js"] 