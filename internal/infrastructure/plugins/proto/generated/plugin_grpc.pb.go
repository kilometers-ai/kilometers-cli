// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KilometersPlugin_GetName_FullMethodName           = "/kilometersplugin.KilometersPlugin/GetName"
	KilometersPlugin_GetVersion_FullMethodName        = "/kilometersplugin.KilometersPlugin/GetVersion"
	KilometersPlugin_GetRequiredTier_FullMethodName   = "/kilometersplugin.KilometersPlugin/GetRequiredTier"
	KilometersPlugin_Authenticate_FullMethodName      = "/kilometersplugin.KilometersPlugin/Authenticate"
	KilometersPlugin_Initialize_FullMethodName        = "/kilometersplugin.KilometersPlugin/Initialize"
	KilometersPlugin_Shutdown_FullMethodName          = "/kilometersplugin.KilometersPlugin/Shutdown"
	KilometersPlugin_HandleMessage_FullMethodName     = "/kilometersplugin.KilometersPlugin/HandleMessage"
	KilometersPlugin_HandleError_FullMethodName       = "/kilometersplugin.KilometersPlugin/HandleError"
	KilometersPlugin_HandleStreamEvent_FullMethodName = "/kilometersplugin.KilometersPlugin/HandleStreamEvent"
)

// KilometersPluginClient is the client API for KilometersPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// KilometersPlugin service defines the GRPC interface for plugins
type KilometersPluginClient interface {
	// Metadata methods
	GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	GetRequiredTier(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	// Authentication & Lifecycle
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Message Processing
	HandleMessage(ctx context.Context, in *HandleMessageRequest, opts ...grpc.CallOption) (*HandleMessageResponse, error)
	HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*HandleErrorResponse, error)
	HandleStreamEvent(ctx context.Context, in *HandleStreamEventRequest, opts ...grpc.CallOption) (*HandleStreamEventResponse, error)
}

type kilometersPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewKilometersPluginClient(cc grpc.ClientConnInterface) KilometersPluginClient {
	return &kilometersPluginClient{cc}
}

func (c *kilometersPluginClient) GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_GetName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) GetRequiredTier(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_GetRequiredTier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) HandleMessage(ctx context.Context, in *HandleMessageRequest, opts ...grpc.CallOption) (*HandleMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleMessageResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_HandleMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*HandleErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleErrorResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_HandleError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kilometersPluginClient) HandleStreamEvent(ctx context.Context, in *HandleStreamEventRequest, opts ...grpc.CallOption) (*HandleStreamEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleStreamEventResponse)
	err := c.cc.Invoke(ctx, KilometersPlugin_HandleStreamEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KilometersPluginServer is the server API for KilometersPlugin service.
// All implementations must embed UnimplementedKilometersPluginServer
// for forward compatibility.
//
// KilometersPlugin service defines the GRPC interface for plugins
type KilometersPluginServer interface {
	// Metadata methods
	GetName(context.Context, *Empty) (*StringResponse, error)
	GetVersion(context.Context, *Empty) (*StringResponse, error)
	GetRequiredTier(context.Context, *Empty) (*StringResponse, error)
	// Authentication & Lifecycle
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Message Processing
	HandleMessage(context.Context, *HandleMessageRequest) (*HandleMessageResponse, error)
	HandleError(context.Context, *HandleErrorRequest) (*HandleErrorResponse, error)
	HandleStreamEvent(context.Context, *HandleStreamEventRequest) (*HandleStreamEventResponse, error)
	mustEmbedUnimplementedKilometersPluginServer()
}

// UnimplementedKilometersPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKilometersPluginServer struct{}

func (UnimplementedKilometersPluginServer) GetName(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedKilometersPluginServer) GetVersion(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedKilometersPluginServer) GetRequiredTier(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequiredTier not implemented")
}
func (UnimplementedKilometersPluginServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedKilometersPluginServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedKilometersPluginServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedKilometersPluginServer) HandleMessage(context.Context, *HandleMessageRequest) (*HandleMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMessage not implemented")
}
func (UnimplementedKilometersPluginServer) HandleError(context.Context, *HandleErrorRequest) (*HandleErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleError not implemented")
}
func (UnimplementedKilometersPluginServer) HandleStreamEvent(context.Context, *HandleStreamEventRequest) (*HandleStreamEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleStreamEvent not implemented")
}
func (UnimplementedKilometersPluginServer) mustEmbedUnimplementedKilometersPluginServer() {}
func (UnimplementedKilometersPluginServer) testEmbeddedByValue()                          {}

// UnsafeKilometersPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KilometersPluginServer will
// result in compilation errors.
type UnsafeKilometersPluginServer interface {
	mustEmbedUnimplementedKilometersPluginServer()
}

func RegisterKilometersPluginServer(s grpc.ServiceRegistrar, srv KilometersPluginServer) {
	// If the following call pancis, it indicates UnimplementedKilometersPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KilometersPlugin_ServiceDesc, srv)
}

func _KilometersPlugin_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).GetName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_GetRequiredTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).GetRequiredTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_GetRequiredTier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).GetRequiredTier(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_HandleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).HandleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_HandleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).HandleMessage(ctx, req.(*HandleMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_HandleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).HandleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_HandleError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).HandleError(ctx, req.(*HandleErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KilometersPlugin_HandleStreamEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleStreamEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KilometersPluginServer).HandleStreamEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KilometersPlugin_HandleStreamEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KilometersPluginServer).HandleStreamEvent(ctx, req.(*HandleStreamEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KilometersPlugin_ServiceDesc is the grpc.ServiceDesc for KilometersPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KilometersPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kilometersplugin.KilometersPlugin",
	HandlerType: (*KilometersPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _KilometersPlugin_GetName_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _KilometersPlugin_GetVersion_Handler,
		},
		{
			MethodName: "GetRequiredTier",
			Handler:    _KilometersPlugin_GetRequiredTier_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _KilometersPlugin_Authenticate_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _KilometersPlugin_Initialize_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _KilometersPlugin_Shutdown_Handler,
		},
		{
			MethodName: "HandleMessage",
			Handler:    _KilometersPlugin_HandleMessage_Handler,
		},
		{
			MethodName: "HandleError",
			Handler:    _KilometersPlugin_HandleError_Handler,
		},
		{
			MethodName: "HandleStreamEvent",
			Handler:    _KilometersPlugin_HandleStreamEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
