name: Release

on:
  push:
    branches: ['main']
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write # Required for creating releases and pushing tags

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate version
        id: version
        run: |
          # Generate date-based version with build number
          DATE=$(date -u +%Y.%-m.%-d)
          
          # Get build number for today (count of commits today + 1)
          BUILD_NUM=$(git log --since="00:00:00" --format=oneline | wc -l | xargs)
          BUILD_NUM=$((BUILD_NUM + 1))
          
          # Create version string
          VERSION="v${DATE}.${BUILD_NUM}"
          
          echo "Generated version: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      
      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists, incrementing build number..."
            exit 1
          fi
      
      - name: Create tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed" >> $GITHUB_OUTPUT
            git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### macOS/Linux
            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.sh | sh
            ```
            
            ### Windows
            ```powershell
            irm https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/install.ps1 | iex
            ```
            
            ### Manual Download
            Download the appropriate binary for your platform from the assets below.
          draft: false
          prerelease: false

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: km
            asset_name: km-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: km
            asset_name: km-linux-arm64
            use-cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: km
            asset_name: km-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: km
            asset_name: km-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: km.exe
            asset_name: km-windows-amd64.exe
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.use-cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build release binary
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Prepare binary
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a -tzip ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
        shell: bash
      
      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Calculate SHA256 checksums
        run: |
          # Download and calculate checksums for macOS binaries
          curl -sL https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/km-darwin-amd64.tar.gz -o km-darwin-amd64.tar.gz
          curl -sL https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/km-darwin-arm64.tar.gz -o km-darwin-arm64.tar.gz
          
          SHA_AMD64=$(shasum -a 256 km-darwin-amd64.tar.gz | cut -d' ' -f1)
          SHA_ARM64=$(shasum -a 256 km-darwin-arm64.tar.gz | cut -d' ' -f1)
          
          echo "SHA_AMD64=${SHA_AMD64}" >> $GITHUB_ENV
          echo "SHA_ARM64=${SHA_ARM64}" >> $GITHUB_ENV
      
      - name: Create Homebrew Formula
        run: |
          mkdir -p Formula
          cat > Formula/km.rb << EOF
          class Km < Formula
            desc "Kilometers CLI - MCP proxy for monitoring and telemetry"
            homepage "https://github.com/${{ github.repository }}"
            version "${{ needs.create-release.outputs.version }}".sub(/^v/, "")
            
            if Hardware::CPU.intel?
              url "https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/km-darwin-amd64.tar.gz"
              sha256 "${{ env.SHA_AMD64 }}"
            else
              url "https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.version }}/km-darwin-arm64.tar.gz"
              sha256 "${{ env.SHA_ARM64 }}"
            end
            
            def install
              bin.install "km"
            end
            
            test do
              system "#{bin}/km", "--version"
            end
          end
          EOF