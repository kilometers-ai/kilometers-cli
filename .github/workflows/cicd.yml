name: Release CLI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v2025.06.28.1) - leave empty for auto-generation"
        required: false

env:
  GO_VERSION: "1.24.4"
  BINARY_NAME: "km"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Download previous coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: previous-coverage
          path: previous-coverage/

      - name: Check test coverage progression
        run: |
          CURRENT_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current test coverage: ${CURRENT_COVERAGE}%"

          # Try to get previous coverage
          if [ -f "previous-coverage/coverage-percentage.txt" ]; then
            PREVIOUS_COVERAGE=$(cat previous-coverage/coverage-percentage.txt)
            echo "Previous test coverage: ${PREVIOUS_COVERAGE}%"
            
            # Allow small tolerance for coverage fluctuation (1%)
            TOLERANCE=1.0
            MINIMUM_REQUIRED=$(echo "$PREVIOUS_COVERAGE - $TOLERANCE" | bc -l)
            
            if (( $(echo "$CURRENT_COVERAGE >= $MINIMUM_REQUIRED" | bc -l) )); then
              if (( $(echo "$CURRENT_COVERAGE >= $PREVIOUS_COVERAGE" | bc -l) )); then
                echo "‚úÖ Test coverage improved from ${PREVIOUS_COVERAGE}% to ${CURRENT_COVERAGE}% üìà"
              else
                echo "‚úÖ Test coverage (${CURRENT_COVERAGE}%) is within tolerance of previous (${PREVIOUS_COVERAGE}%)"
              fi
            else
              echo "‚ùå Test coverage decreased significantly from ${PREVIOUS_COVERAGE}% to ${CURRENT_COVERAGE}%"
              echo "   Coverage dropped by $(echo "$PREVIOUS_COVERAGE - $CURRENT_COVERAGE" | bc -l)%, which exceeds tolerance of ${TOLERANCE}%"
              exit 1
            fi
          else
            echo "üìä No previous coverage data found. Setting baseline at ${CURRENT_COVERAGE}%"
            # For new repos or first runs, accept any coverage as baseline
          fi

          # Store current coverage for next run
          echo "${CURRENT_COVERAGE}" > current-coverage-percentage.txt
          cp current-coverage-percentage.txt coverage-percentage.txt  # Copy for next run to find

          # Also store detailed coverage for tracking
          echo "Coverage report generated at $(date)" > coverage-summary.txt
          echo "Total coverage: ${CURRENT_COVERAGE}%" >> coverage-summary.txt
          go tool cover -func=coverage.out >> coverage-summary.txt

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
          retention-days: 7

      - name: Upload current coverage for next run
        uses: actions/upload-artifact@v4
        with:
          name: previous-coverage
          path: |
            current-coverage-percentage.txt
            coverage-percentage.txt
            coverage-summary.txt
          retention-days: 30

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run security scan
        run: govulncheck ./...

  build:
    name: Build CLI Binaries
    runs-on: ubuntu-latest
    needs: test # Only build if tests pass
    outputs:
      version: ${{ steps.version.outputs.version }} # Export version for other jobs

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: ""
          - os: linux
            arch: arm64
            suffix: ""
          - os: darwin
            arch: amd64
            suffix: ""
          - os: darwin
            arch: arm64
            suffix: ""
          - os: windows
            arch: amd64
            suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Generate date-based version
        id: version
        run: |
          # Check if manual version was provided
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual version: ${VERSION}"
          else
            # Generate date-based version: v2025.06.28.1
            DATE_VERSION=$(date +%Y.%m.%d)
            
            # Get the latest tag for today to determine build number
            TODAY_TAGS=$(git tag -l "cli-v${DATE_VERSION}.*" | sort -V | tail -1)
            
            if [ -z "$TODAY_TAGS" ]; then
              # First build of the day
              BUILD_NUMBER=1
            else
              # Extract build number and increment
              LAST_BUILD=$(echo "$TODAY_TAGS" | sed "s/cli-v${DATE_VERSION}.//")
              BUILD_NUMBER=$((LAST_BUILD + 1))
            fi
            
            VERSION="cli-v${DATE_VERSION}.${BUILD_NUMBER}"
            echo "Auto-generated date-based version: ${VERSION}"
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Final version: ${VERSION}"

      - name: Build binary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BINARY="km-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}"
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          # Create dist directory in root
          mkdir -p dist

          # Build with version info and build metadata (from root directory)
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
            go build -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME}" \
            -o "dist/${BINARY}" .

          # Verify binary was created
          if [ ! -f "dist/${BINARY}" ]; then
            echo "ERROR: Binary not created: ${BINARY}"
            exit 1
          fi

          # Create checksums and verify
          cd dist
          sha256sum "${BINARY}" > "${BINARY}.sha256"
          sha256sum -c "${BINARY}.sha256"

          echo "‚úÖ Built: ${BINARY} ($(stat -c%s "${BINARY}" | numfmt --to=iec))"
          ls -la

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: km-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Only create releases for actual builds
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release

          # Debug: show artifacts structure
          echo "Artifacts directory structure:"
          find artifacts -type f | head -20

          # Copy all binaries and checksums from nested subdirectories
          # Each artifact is in artifacts/artifact-name/dist/binary-files
          find artifacts -type f -name 'km-*' -exec cp {} release/ \;

          # Alternative approach in case find doesn't work - direct copy from known structure
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              echo "Checking artifact directory: $artifact_dir"
              find "$artifact_dir" -name 'km-*' -type f -exec cp {} release/ \;
            fi
          done

          # Verify files were copied
          echo "Release files prepared:"
          cd release
          ls -la

          # Verify we have actual binaries (not empty files)
          for file in km-*; do
            if [ -f "$file" ] && [[ ! "$file" == *.sha256 ]]; then
              echo "Binary $file size: $(stat -c%s "$file" | numfmt --to=iec)"
              file "$file"
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Kilometers CLI ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          files: release/*
          body: |
            # Kilometers CLI ${{ needs.build.outputs.version }}

            **üóìÔ∏è Date-based automatic release** 
            This version was automatically generated and released when CLI changes were pushed to main.

            ## Installation

            ### Quick Install (macOS/Linux)
            ```bash
            curl -sSL https://get.kilometers.ai | sh
            ```

            ### Manual Download
            Download the appropriate binary for your platform below.

            ## What's Changed
            - See commit history and [CHANGELOG.md](https://github.com/kilometers-ai/kilometers/blob/main/CHANGELOG.md)
            - Auto-versioned as **${{ needs.build.outputs.version }}**

            ## Checksums
            SHA256 checksums are provided for each binary.

  deploy-cdn:
    name: Deploy to CDN
    needs: [build, release]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Only deploy for actual releases
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload binaries to Azure Storage
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          STORAGE_ACCOUNT="${{ secrets.CLI_STORAGE_ACCOUNT }}"

          if [ -z "$STORAGE_ACCOUNT" ]; then
            echo "ERROR: CLI_STORAGE_ACCOUNT secret not set"
            exit 1
          fi

          echo "Uploading to storage account: $STORAGE_ACCOUNT"

          # Debug: show what files we're trying to upload
          echo "Files to upload:"
          find artifacts -name "km-*" -type f | head -10

          # Upload version directory to static website with retry logic
          for attempt in 1 2 3; do
            if az storage blob upload-batch \
              --auth-mode login \
              --account-name "${STORAGE_ACCOUNT}" \
              --destination '$web' \
              --destination-path "releases/${VERSION}" \
              --source artifacts \
              --pattern "*/dist/km-*" \
              --output table; then
              echo "‚úÖ Version upload successful on attempt $attempt"
              break
            else
              echo "‚ùå Version upload failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "ERROR: Static website container may not exist - check Terraform CLI distribution module"
                exit 1
              fi
              sleep 5
            fi
          done

          # Update latest directory with retry logic
          for attempt in 1 2 3; do
            if az storage blob upload-batch \
              --auth-mode login \
              --account-name "${STORAGE_ACCOUNT}" \
              --destination '$web' \
              --destination-path "releases/latest" \
              --source artifacts \
              --pattern "*/dist/km-*" \
              --overwrite \
              --output table; then
              echo "‚úÖ Latest upload successful on attempt $attempt"
              break
            else
              echo "‚ùå Latest upload failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "ERROR: Static website container may not exist - check Terraform CLI distribution module"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Upload install scripts
        run: |
          STORAGE_ACCOUNT="${{ secrets.CLI_STORAGE_ACCOUNT }}"

          # Upload Unix/Linux install script to static website root
          if [ -f "scripts/install.sh" ]; then
            az storage blob upload \
              --auth-mode login \
              --account-name "${STORAGE_ACCOUNT}" \
              --container-name '$web' \
              --name "install.sh" \
              --file "scripts/install.sh" \
              --content-type "text/plain" \
              --overwrite
            echo "‚úÖ Uploaded Unix install script"
          else
            echo "‚ùå ERROR: scripts/install.sh not found"
            exit 1
          fi

          # Upload Windows installer (PowerShell)
          if [ -f "scripts/install.ps1" ]; then
            az storage blob upload \
              --auth-mode login \
              --account-name "${STORAGE_ACCOUNT}" \
              --container-name '$web' \
              --name "install.ps1" \
              --file "scripts/install.ps1" \
              --content-type "text/plain" \
              --overwrite
            echo "‚úÖ Uploaded Windows install script"
          else
            echo "‚ùå ERROR: scripts/install.ps1 not found"
            exit 1
          fi

          # Upload the install page for browsers
          if [ -f "scripts/index.html" ]; then
            az storage blob upload \
              --auth-mode login \
              --account-name "${STORAGE_ACCOUNT}" \
              --container-name '$web' \
              --name "index.html" \
              --file "scripts/index.html" \
              --content-type "text/html" \
              --overwrite
            echo "‚úÖ Uploaded install page"
          else
            echo "‚ùå ERROR: scripts/index.html not found"
            exit 1
          fi

      - name: Purge CDN cache
        run: |
          CDN_PROFILE="cdnp-kilometers-cli-dev"
          CDN_ENDPOINT="cdne-kilometers-get-dev"
          RESOURCE_GROUP="rg-kilometers-dev"

          # Purge binary release paths
          az cdn endpoint purge \
            --resource-group "${RESOURCE_GROUP}" \
            --profile-name "${CDN_PROFILE}" \
            --name "${CDN_ENDPOINT}" \
            --content-paths "/releases/latest/*"

          # Purge install scripts at root level
          az cdn endpoint purge \
            --resource-group "${RESOURCE_GROUP}" \
            --profile-name "${CDN_PROFILE}" \
            --name "${CDN_ENDPOINT}" \
            --content-paths "/install.sh" "/install.ps1" "/index.html" "/"

      - name: Test installation
        run: |
          # Wait for CDN propagation
          echo "‚è≥ Waiting for CDN cache purge to complete..."
          sleep 30

          # Test the install script
          echo "üß™ Testing install script..."
          curl -sSL https://get.kilometers.ai/install.sh | sh -s -- --help

          echo "‚úÖ Install script test completed successfully"
