name: Pull Request Checks

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
      - "scripts/install.*"

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Essential checks for PRs
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-pr-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test on all platforms for PRs
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Node.js (for MCP testing)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        if: matrix.os != 'windows-latest'

      - name: Make test scripts executable
        run: chmod +x run_integration_tests.sh
        if: matrix.os != 'windows-latest'

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-pr-
            ${{ runner.os }}-cargo-

      - name: Check workspace integrity
        run: |
          cargo check --verbose
          cargo tree --depth 1

      - name: Build (Debug)
        run: cargo build --verbose

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test '*' --verbose

      - name: Run comprehensive integration tests
        run: ./run_integration_tests.sh
        if: matrix.os == 'ubuntu-latest'

      - name: Validate binary functionality
        run: |
          ./target/debug/km --help
          ./target/debug/km --version
        if: matrix.os != 'windows-latest'

      - name: Validate binary functionality (Windows)
        run: |
          ./target/debug/km.exe --help
          ./target/debug/km.exe --version
        if: matrix.os == 'windows-latest'

  # Security audit - essential for PRs
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo audit
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-audit
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-cargo-audit
          restore-keys: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        run: cargo install --locked cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings

  # Lightweight coverage check for PRs (no upload)
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --verbose --out Xml --all-features --workspace --timeout 120

      - name: Check coverage threshold
        run: |
          COVERAGE=$(cargo tarpaulin --verbose --all-features --workspace --timeout 120 | grep -E "^[0-9]+\.[0-9]+%" | tail -1 | cut -d'%' -f1)
          echo "Current coverage: ${COVERAGE}%"
          # Set minimum coverage threshold (adjust as needed)
          if [ "${COVERAGE%.*}" -lt "70" ]; then
            echo "Coverage ${COVERAGE}% is below minimum threshold of 70%"
            exit 1
          fi

  # Summary job to ensure all PR checks pass
  pr-check:
    name: PR Checks Complete
    runs-on: ubuntu-latest
    needs: [lint, build-and-test, security, coverage]
    if: always()

    steps:
      - name: Check all job statuses
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "One or more required PR checks failed"
            exit 1
          fi
          echo "All PR checks passed! âœ…"
