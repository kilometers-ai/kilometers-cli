name: Pull Request Checks

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "*.md"
      - "docs/**"
      - ".gitignore"
      - "LICENSE"
      - "scripts/install.*"

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Essential checks for PRs
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-pr-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test on all platforms for PRs
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Node.js (for MCP testing)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        if: matrix.os != 'windows-latest'

      - name: Make test scripts executable
        run: chmod +x run_integration_tests.sh
        if: matrix.os != 'windows-latest'

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-pr-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-pr-
            ${{ runner.os }}-cargo-

      - name: Check workspace integrity
        run: |
          cargo check --verbose
          cargo tree --depth 1

      - name: Build (Debug)
        run: cargo build --verbose

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test '*' --verbose

      - name: Run comprehensive integration tests
        run: ./run_integration_tests.sh
        if: matrix.os == 'ubuntu-latest'

      - name: Validate binary functionality
        run: |
          ./target/debug/km --help
          ./target/debug/km --version
        if: matrix.os != 'windows-latest'

      - name: Validate binary functionality (Windows)
        run: |
          ./target/debug/km.exe --help
          ./target/debug/km.exe --version
        if: matrix.os == 'windows-latest'

  # Security audit - essential for PRs
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo audit
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cargo-audit
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: ${{ runner.os }}-cargo-audit
          restore-keys: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        run: cargo install --locked cargo-audit

      - name: Run security audit
        run: cargo audit --deny warnings

  # Coverage comparison check for PRs
  coverage:
    name: Coverage Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate PR coverage report
        run: cargo tarpaulin --verbose --out Xml --all-features --workspace --timeout 120

      - name: Extract PR coverage percentage
        id: pr_coverage
        run: |
          COVERAGE=$(cargo tarpaulin --verbose --all-features --workspace --timeout 120 2>&1 | grep -E "^[0-9]+\.[0-9]+%" | tail -1 | cut -d'%' -f1)
          echo "PR Coverage: ${COVERAGE}%"
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

      - name: Install dependencies for coverage comparison
        run: sudo apt-get update && sudo apt-get install -y bc

      - name: Get latest main branch coverage
        id: main_coverage
        run: |
          # Try to get the latest main branch coverage artifact using GitHub API
          MAIN_COVERAGE_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
            | jq -r '.artifacts[] | select(.name=="main-coverage" and .workflow_run.head_branch=="main") | .archive_download_url' \
            | head -1)

          if [ "$MAIN_COVERAGE_URL" != "null" ] && [ ! -z "$MAIN_COVERAGE_URL" ]; then
            echo "Found main coverage artifact, downloading..."
            curl -L \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "$MAIN_COVERAGE_URL" \
              -o coverage.zip
            unzip coverage.zip
            echo "main_coverage_available=true" >> $GITHUB_OUTPUT
          else
            echo "No main coverage artifact found"
            echo "main_coverage_available=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Compare coverage with main branch
        run: |
          PR_COVERAGE="${{ steps.pr_coverage.outputs.coverage }}"

          if [ "${{ steps.main_coverage.outputs.main_coverage_available }}" = "true" ] && [ -f "coverage.json" ]; then
            # Extract main branch coverage from artifact
            MAIN_COVERAGE=$(cat coverage.json | grep -o '"coverage": *[0-9.]*' | grep -o '[0-9.]*')
            MAIN_TIMESTAMP=$(cat coverage.json | grep -o '"timestamp": *"[^"]*"' | grep -o '[0-9T:-]*')

            echo "Main branch coverage: ${MAIN_COVERAGE}% (as of ${MAIN_TIMESTAMP})"
            echo "PR coverage: ${PR_COVERAGE}%"

            # Calculate the difference
            DIFF=$(echo "${PR_COVERAGE} - ${MAIN_COVERAGE}" | bc -l)
            echo "Coverage difference: ${DIFF}%"

            # Check if coverage increased or stayed the same (allow 0.1% tolerance for rounding)
            if (( $(echo "${PR_COVERAGE} >= ${MAIN_COVERAGE} - 0.1" | bc -l) )); then
              echo "✅ Coverage check passed! Coverage maintained or improved."
              echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
              echo "- **Main branch coverage:** ${MAIN_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- **PR coverage:** ${PR_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- **Change:** ${DIFF}%" >> $GITHUB_STEP_SUMMARY
              if (( $(echo "${DIFF} > 0" | bc -l) )); then
                echo "- **Status:** 🎉 Coverage improved!" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **Status:** ✅ Coverage maintained" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Coverage check failed! Coverage decreased by $(echo "${MAIN_COVERAGE} - ${PR_COVERAGE}" | bc -l)%"
              echo "Main branch: ${MAIN_COVERAGE}%, PR: ${PR_COVERAGE}%"
              echo "## ❌ Coverage Check Failed" >> $GITHUB_STEP_SUMMARY
              echo "- **Main branch coverage:** ${MAIN_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- **PR coverage:** ${PR_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
              echo "- **Decrease:** $(echo "${MAIN_COVERAGE} - ${PR_COVERAGE}" | bc -l)%" >> $GITHUB_STEP_SUMMARY
              echo "- **Required:** Coverage must not decrease" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️  No main branch coverage found. This might be the first run or artifact expired."
            echo "Current PR coverage: ${PR_COVERAGE}%"
            echo "Allowing this PR to pass as baseline coverage."
            echo "## ⚠️ Coverage Baseline" >> $GITHUB_STEP_SUMMARY
            echo "- **PR coverage:** ${PR_COVERAGE}%" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** First run or main coverage unavailable - establishing baseline" >> $GITHUB_STEP_SUMMARY
          fi

  # Summary job to ensure all PR checks pass
  pr-check:
    name: PR Checks Complete
    runs-on: ubuntu-latest
    needs: [lint, build-and-test, security, coverage]
    if: always()

    steps:
      - name: Check all job statuses
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.coverage.result }}" != "success" ]]; then
            echo "One or more required PR checks failed"
            exit 1
          fi
          echo "All PR checks passed! ✅"
